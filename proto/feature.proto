syntax = "proto3";
option go_package="./proto/feature";

package feature;

service Features {
    rpc DeleteFeature(DeleteFeatureRequest) returns (DeleteFeatureResponse) {};
    rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {};
    rpc GetFeatures(GetFeaturesRequest) returns (GetFeaturesResponse) {};
    rpc SetFeature(SetFeatureRequest) returns (SetFeatureResponse) {};
}

message Feature {
    enum Type {
        UNKNOWN = 0;
        CONSTANT = 1;
        PERCENTAGE_BASED = 2;
        EXPRESSION = 3;
    }

    string name = 1;
    Type type = 2;

    // Enabled is a constant on/off state for this feature. This is used for
    // CONSTANT type features.
    bool enabled = 3;
    // Percentage is an unsigned integer in [0, 100], used for PERCENTAGE_BASED
    // features.
    uint32 percentage = 4;
    // Expression is a string expression that will be evaluated to determine
    // whether the feature should be enabled or disabled for a given
    // request/etc. This is used for EXPRESSION type features.
    string expression = 5;
}

message DeleteFeatureRequest {
    string name = 1;
}

message DeleteFeatureResponse {
    // Feature is the deleted feature, or nil if there was no such feature.
    Feature feature = 1;
}

message GetFeatureRequest {
    string name = 1;
}

message GetFeatureResponse {
    Feature feature = 1;
}

message GetFeaturesRequest {
    bool names_only = 1;
}

message GetFeaturesResponse {
    repeated Feature features = 1;
    repeated string names = 2;
}

message SetFeatureRequest {
    Feature feature = 1;
}

message SetFeatureResponse {
    Feature before = 1;
    Feature after = 2;
}
